// Code generated by MockGen. DO NOT EDIT.
// Source: lotusaccessor.go

// Package mock_dagstore is a generated GoMock package.
package mock_dagstore

import (
	"context"
	"reflect"

	"github.com/filecoin-project/dagstore/mount"
	"github.com/golang/mock/gomock"
	"github.com/ipfs/go-cid"
)

// MockLotusAccessor is a mock of LotusAccessor interface.
type MockLotusAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockLotusAccessorMockRecorder
}

// MockLotusAccessorMockRecorder is the mock recorder for MockLotusAccessor.
type MockLotusAccessorMockRecorder struct {
	mock *MockLotusAccessor
}

// NewMockLotusAccessor creates a new mock instance.
func NewMockLotusAccessor(ctrl *gomock.Controller) *MockLotusAccessor {
	mock := &MockLotusAccessor{ctrl: ctrl}
	mock.recorder = &MockLotusAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLotusAccessor) EXPECT() *MockLotusAccessorMockRecorder {
	return m.recorder
}

// FetchFromPieceStorage mocks base method.
func (m *MockLotusAccessor) FetchFromPieceStorage(ctx context.Context, pieceCid cid.Cid) (mount.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromPieceStorage", ctx, pieceCid)
	ret0, _ := ret[0].(mount.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromPieceStorage indicates an expected call of FetchFromPieceStorage.
func (mr *MockLotusAccessorMockRecorder) FetchFromPieceStorage(ctx, pieceCid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromPieceStorage", reflect.TypeOf((*MockLotusAccessor)(nil).FetchFromPieceStorage), ctx, pieceCid)
}

// GetUnpaddedCARSize mocks base method.
func (m *MockLotusAccessor) GetUnpaddedCARSize(ctx context.Context, pieceCid cid.Cid) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpaddedCARSize", ctx, pieceCid)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpaddedCARSize indicates an expected call of GetUnpaddedCARSize.
func (mr *MockLotusAccessorMockRecorder) GetUnpaddedCARSize(ctx, pieceCid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpaddedCARSize", reflect.TypeOf((*MockLotusAccessor)(nil).GetUnpaddedCARSize), ctx, pieceCid)
}

// IsUnsealed mocks base method.
func (m *MockLotusAccessor) IsUnsealed(ctx context.Context, pieceCid cid.Cid) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnsealed", ctx, pieceCid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUnsealed indicates an expected call of IsUnsealed.
func (mr *MockLotusAccessorMockRecorder) IsUnsealed(ctx, pieceCid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnsealed", reflect.TypeOf((*MockLotusAccessor)(nil).IsUnsealed), ctx, pieceCid)
}

// Start mocks base method.
func (m *MockLotusAccessor) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockLotusAccessorMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLotusAccessor)(nil).Start), ctx)
}
